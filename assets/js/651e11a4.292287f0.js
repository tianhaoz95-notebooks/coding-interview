"use strict";(self.webpackChunkcoding_interview=self.webpackChunkcoding_interview||[]).push([[726],{3905:function(n,e,t){t.d(e,{Zo:function(){return l},kt:function(){return m}});var r=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var c=r.createContext({}),u=function(n){var e=r.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},l=function(n){var e=u(n.components);return r.createElement(c.Provider,{value:e},n.children)},f={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},p=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,o=n.originalType,c=n.parentName,l=s(n,["components","mdxType","originalType","parentName"]),p=u(t),m=i,d=p["".concat(c,".").concat(m)]||p[m]||f[m]||o;return t?r.createElement(d,a(a({ref:e},l),{},{components:t})):r.createElement(d,a({ref:e},l))}));function m(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var o=t.length,a=new Array(o);a[0]=p;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=n,s.mdxType="string"==typeof n?n:i,a[1]=s;for(var u=2;u<o;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3429:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return l},default:function(){return p}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],s={},c="1865. Finding Pairs With a Certain Sum",u={unversionedId:"solutions/finding_pairs_with_a_certain_sum",id:"solutions/finding_pairs_with_a_certain_sum",title:"1865. Finding Pairs With a Certain Sum",description:"",source:"@site/docs/solutions/1865__finding_pairs_with_a_certain_sum.md",sourceDirName:"solutions",slug:"/solutions/finding_pairs_with_a_certain_sum",permalink:"/coding-interview/docs/solutions/finding_pairs_with_a_certain_sum",editUrl:"https://github.com/tianhaoz95-notebooks/coding-interview/edit/main/docs/solutions/1865__finding_pairs_with_a_certain_sum.md",tags:[],version:"current",sidebarPosition:1865,frontMatter:{},sidebar:"solutionsSidebar",previous:{title:"1864. Minimum Number of Swaps to Make the Binary String Alternating",permalink:"/coding-interview/docs/solutions/minimum_number_of_swaps_to_make_the_binary_string_alternating"},next:{title:"1866. Number of Ways to Rearrange Sticks With K Sticks Visible",permalink:"/coding-interview/docs/solutions/number_of_ways_to_rearrange_sticks_with_k_sticks_visible"}},l=[],f={toc:l};function p(n){var e=n.components,t=(0,i.Z)(n,a);return(0,o.kt)("wrapper",(0,r.Z)({},f,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"1865-finding-pairs-with-a-certain-sum"},"1865. Finding Pairs With a Certain Sum"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import Counter\n\nclass FindSumPairs:\n\n    def __init__(self, nums1: List[int], nums2: List[int]):\n        self.a = nums1\n        self.b = nums2\n        self.m = Counter()\n        for e in self.b:\n            self.m[e] += 1\n\n    def add(self, index: int, val: int) -> None:\n        self.m[self.b[index]] -= 1\n        self.b[index] += val\n        self.m[self.b[index]] += 1\n\n    def count(self, tot: int) -> int:\n        cnt = 0\n        for v in self.a:\n            cnt += self.m[tot - v]\n        return cnt\n")))}p.isMDXComponent=!0}}]);