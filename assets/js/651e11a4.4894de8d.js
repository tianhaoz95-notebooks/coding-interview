(self.webpackChunkcoding_interview=self.webpackChunkcoding_interview||[]).push([[726],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return l},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),p=u(t),m=i,d=p["".concat(c,".").concat(m)]||p[m]||f[m]||o;return t?r.createElement(d,s(s({ref:n},l),{},{components:t})):r.createElement(d,s({ref:n},l))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,s=new Array(o);s[0]=p;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var u=2;u<o;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3399:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},metadata:function(){return a},toc:function(){return c},default:function(){return l}});var r=t(2122),i=t(9756),o=(t(7294),t(3905)),s={},a={unversionedId:"solutions/finding_pairs_with_a_certain_sum",id:"solutions/finding_pairs_with_a_certain_sum",isDocsHomePage:!1,title:"1865. Finding Pairs With a Certain Sum",description:"`python",source:"@site/docs/solutions/1865__finding_pairs_with_a_certain_sum.md",sourceDirName:"solutions",slug:"/solutions/finding_pairs_with_a_certain_sum",permalink:"/coding-interview/docs/solutions/finding_pairs_with_a_certain_sum",editUrl:"https://github.com/tianhaoz95-notebooks/coding-interview/edit/main/docs/solutions/1865__finding_pairs_with_a_certain_sum.md",version:"current",sidebarPosition:1865,frontMatter:{},sidebar:"solutionsSidebar",previous:{title:"1864. Minimum Number of Swaps to Make the Binary String Alternating",permalink:"/coding-interview/docs/solutions/minimum_number_of_swaps_to_make_the_binary_string_alternating"},next:{title:"1866. Number of Ways to Rearrange Sticks With K Sticks Visible",permalink:"/coding-interview/docs/solutions/number_of_ways_to_rearrange_sticks_with_k_sticks_visible"}},c=[],u={toc:c};function l(e){var n=e.components,t=(0,i.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import Counter\n\nclass FindSumPairs:\n\n    def __init__(self, nums1: List[int], nums2: List[int]):\n        self.a = nums1\n        self.b = nums2\n        self.m = Counter()\n        for e in self.b:\n            self.m[e] += 1\n\n    def add(self, index: int, val: int) -> None:\n        self.m[self.b[index]] -= 1\n        self.b[index] += val\n        self.m[self.b[index]] += 1\n\n    def count(self, tot: int) -> int:\n        cnt = 0\n        for v in self.a:\n            cnt += self.m[tot - v]\n        return cnt\n")))}l.isMDXComponent=!0}}]);