(self.webpackChunkcoding_interview=self.webpackChunkcoding_interview||[]).push([[867],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return l},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),p=c(t),f=o,d=p["".concat(s,".").concat(f)]||p[f]||m[f]||i;return t?r.createElement(d,a(a({ref:n},l),{},{components:t})):r.createElement(d,a({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=p;var u={};for(var s in n)hasOwnProperty.call(n,s)&&(u[s]=n[s]);u.originalType=e,u.mdxType="string"==typeof e?e:o,a[1]=u;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6944:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return a},metadata:function(){return u},toc:function(){return s},default:function(){return l}});var r=t(2122),o=t(9756),i=(t(7294),t(3905)),a={},u={unversionedId:"solutions/maximum-distance-between-a-pair-of-values",id:"solutions/maximum-distance-between-a-pair-of-values",isDocsHomePage:!1,title:"1855. Maximum Distance Between a Pair of Values",description:"`python",source:"@site/docs/solutions/1855__maximum-distance-between-a-pair-of-values.md",sourceDirName:"solutions",slug:"/solutions/maximum-distance-between-a-pair-of-values",permalink:"/coding-interview/docs/solutions/maximum-distance-between-a-pair-of-values",editUrl:"https://github.com/tianhaoz95-notebooks/coding-interview/edit/main/docs/solutions/1855__maximum-distance-between-a-pair-of-values.md",version:"current",sidebarPosition:1855,frontMatter:{},sidebar:"solutionsSidebar",previous:{title:"1854. Maximum Population Year",permalink:"/coding-interview/docs/solutions/maximum-population-year"},next:{title:"1863. Sum of All Subset XOR Totals",permalink:"/coding-interview/docs/solutions/sum_of_all_subset_xor_totals"}},s=[],c={toc:s};function l(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n  def maxDistance(self, nums1: List[int], nums2: List[int]) -> int:\n    max_dist = 0\n    j = 0\n    for i, v in enumerate(nums1):\n      j = max(i, j)\n      while j + 1 < len(nums2) and v <= nums2[j + 1]:\n        j += 1\n      max_dist = max(max_dist, j - i)\n    return max_dist\n")))}l.isMDXComponent=!0}}]);