"use strict";(self.webpackChunkcoding_interview=self.webpackChunkcoding_interview||[]).push([[389],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return u}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),m=s(n),u=i,k=m["".concat(c,".").concat(u)]||m[u]||d[u]||a;return n?r.createElement(k,o(o({ref:t},l),{},{components:n})):r.createElement(k,o({ref:t},l))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:i,o[1]=p;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4741:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},metadata:function(){return c},toc:function(){return s},default:function(){return d}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],p={},c={unversionedId:"solutions/number_of_ways_to_rearrange_sticks_with_k_sticks_visible",id:"solutions/number_of_ways_to_rearrange_sticks_with_k_sticks_visible",isDocsHomePage:!1,title:"1866. Number of Ways to Rearrange Sticks With K Sticks Visible",description:"For n=3, k=2:",source:"@site/docs/solutions/1866__number_of_ways_to_rearrange_sticks_with_k_sticks_visible.md",sourceDirName:"solutions",slug:"/solutions/number_of_ways_to_rearrange_sticks_with_k_sticks_visible",permalink:"/coding-interview/docs/solutions/number_of_ways_to_rearrange_sticks_with_k_sticks_visible",editUrl:"https://github.com/tianhaoz95-notebooks/coding-interview/edit/main/docs/solutions/1866__number_of_ways_to_rearrange_sticks_with_k_sticks_visible.md",version:"current",sidebarPosition:1866,frontMatter:{},sidebar:"solutionsSidebar",previous:{title:"1865. Finding Pairs With a Certain Sum",permalink:"/coding-interview/docs/solutions/finding_pairs_with_a_certain_sum"},next:{title:"1869. Longer Contiguous Segments of Ones than Zeros",permalink:"/coding-interview/docs/solutions/longer-contiguous-segments-of-ones-than-zeros"}},s=[],l={toc:s};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"For ",(0,a.kt)("inlineCode",{parentName:"p"},"n=3, k=2"),":"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"center"},"\ud83d\ude80"),(0,a.kt)("th",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"th"},"j0")),(0,a.kt)("th",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"th"},"j1")),(0,a.kt)("th",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"th"},"j2")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"i0")),(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"0")),(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"0")),(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"0"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"i1")),(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"0")),(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"1")),(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"dp(0,2) * (1-1) + dp(0, 1) = 0"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"i2")),(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"0")),(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"dp(1,1) * (2-1) + dp(1,0) = 1")),(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"dp(1,2) * (2-1) + dp(1,1) = 1"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"i3")),(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"0")),(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"dp(2,1) * (3-1) + dp(2,0) = 2")),(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"dp(2,2) * (3-1) + dp(2,1) = 3"))))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def rearrangeSticks(self, n: int, k: int) -> int:\n        mod = 10**9 + 7\n        dp = [[0 for i in range(k + 1)] for j in range(n + 1)]\n        dp[1][1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, k + 1):\n                dp[i][j] = dp[i - 1][j] * (i - 1) % mod + dp[i - 1][j - 1]\n                if dp[i][j] >= mod:\n                    dp[i][j] -= mod\n        return dp[n][k]\n")))}d.isMDXComponent=!0}}]);