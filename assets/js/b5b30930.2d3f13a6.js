(self.webpackChunkcoding_interview=self.webpackChunkcoding_interview||[]).push([[189],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return l},kt:function(){return f}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),p=c(t),f=i,d=p["".concat(u,".").concat(f)]||p[f]||m[f]||o;return t?r.createElement(d,s(s({ref:n},l),{},{components:t})):r.createElement(d,s({ref:n},l))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,s=new Array(o);s[0]=p;var a={};for(var u in n)hasOwnProperty.call(n,u)&&(a[u]=n[u]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var c=2;c<o;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},692:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},metadata:function(){return a},toc:function(){return u},default:function(){return l}});var r=t(2122),i=t(9756),o=(t(7294),t(3905)),s={},a={unversionedId:"solutions/minimum-speed-to-arrive-on-time",id:"solutions/minimum-speed-to-arrive-on-time",isDocsHomePage:!1,title:"1870. Minimum Speed to Arrive on Time",description:"This problem is a binary search.",source:"@site/docs/solutions/1870__minimum-speed-to-arrive-on-time.md",sourceDirName:"solutions",slug:"/solutions/minimum-speed-to-arrive-on-time",permalink:"/coding-interview/docs/solutions/minimum-speed-to-arrive-on-time",editUrl:"https://github.com/tianhaoz95-notebooks/coding-interview/edit/main/docs/solutions/1870__minimum-speed-to-arrive-on-time.md",version:"current",sidebarPosition:1870,frontMatter:{},sidebar:"solutionsSidebar",previous:{title:"1869. Longer Contiguous Segments of Ones than Zeros",permalink:"/coding-interview/docs/solutions/longer-contiguous-segments-of-ones-than-zeros"},next:{title:"1871. Jump Game VII",permalink:"/coding-interview/docs/solutions/jump-game-vii"}},u=[],c={toc:u};function l(e){var n=e.components,t=(0,i.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This problem is a binary search."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from math import ceil\n\nclass Solution:\n  def computeArrivalTime(self, dist: List[int], v: int) -> float:\n    return sum([ceil(d / v) for d in dist[:-1]] + [dist[-1]/v])\n  \n  def bSearch(self, dist: List[int], hour: float) -> int:\n    lo = 10**-7\n    hi = 10**7 + 1\n    while lo + 1 < hi:\n      mid = (lo + hi) // 2\n      if self.computeArrivalTime(dist, mid) <= hour:\n        hi = mid\n      else:\n        lo = mid\n    return int(hi)\n  \n  def minSpeedOnTime(self, dist: List[int], hour: float) -> int:\n    if hour <= len(dist) - 1:\n      return -1\n    return self.bSearch(dist, hour)\n")))}l.isMDXComponent=!0}}]);