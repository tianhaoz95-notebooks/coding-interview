"use strict";(self.webpackChunkcoding_interview=self.webpackChunkcoding_interview||[]).push([[333],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return d}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),p=l(t),d=i,y=p["".concat(c,".").concat(d)]||p[d]||f[d]||o;return t?r.createElement(y,a(a({ref:n},s),{},{components:t})):r.createElement(y,a({ref:n},s))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=p;var u={};for(var c in n)hasOwnProperty.call(n,c)&&(u[c]=n[c]);u.originalType=e,u.mdxType="string"==typeof e?e:i,a[1]=u;for(var l=2;l<o;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5289:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],u={},c="2080. Range Frequency Queries",l={unversionedId:"solutions/range-frequency-queries",id:"solutions/range-frequency-queries",title:"2080. Range Frequency Queries",description:"",source:"@site/docs/solutions/2080__range-frequency-queries.md",sourceDirName:"solutions",slug:"/solutions/range-frequency-queries",permalink:"/coding-interview/docs/solutions/range-frequency-queries",editUrl:"https://github.com/tianhaoz95-notebooks/coding-interview/edit/main/docs/solutions/2080__range-frequency-queries.md",tags:[],version:"current",sidebarPosition:2080,frontMatter:{},sidebar:"solutionsSidebar",previous:{title:"2079. Watering Plants",permalink:"/coding-interview/docs/solutions/watering-plants"},next:{title:"2081. Sum of k-Mirror Numbers",permalink:"/coding-interview/docs/solutions/sum-of-k-mirror-numbers"}},s=[],f={toc:s};function p(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"2080-range-frequency-queries"},"2080. Range Frequency Queries"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class RangeFreqQuery(object):\n\n    def __init__(self, arr):\n        """\n        :type arr: List[int]\n        """\n        self.t = []\n        d = dict()\n        for i, v in enumerate(arr):\n            if v not in d:\n                d[v] = 0\n            d[v] += 1\n            # (number, current_cnt)\n            self.t.append((v, d[v]))\n        # print(self.t)\n        \n\n    def query(self, left, right, value):\n        """\n        :type left: int\n        :type right: int\n        :type value: int\n        :rtype: int\n        """\n        init_cnt = 0\n        left -= 1\n        while left >= 0:\n            val, cnt = self.t[left]\n            if val == value:\n                # print(\'left: \', self.t[left])\n                init_cnt = cnt\n                break\n            left -= 1\n        final_cnt = 0\n        while right > left:\n            val, cnt = self.t[right]\n            if val == value:\n                # print(\'right: \', self.t[right])\n                final_cnt = cnt\n                break\n            right -= 1\n        return max(final_cnt - init_cnt, 0)\n\n\n# Your RangeFreqQuery object will be instantiated and called as such:\n# obj = RangeFreqQuery(arr)\n# param_1 = obj.query(left,right,value)\n')))}p.isMDXComponent=!0}}]);