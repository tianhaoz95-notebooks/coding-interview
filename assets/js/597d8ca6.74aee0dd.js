"use strict";(self.webpackChunkcoding_interview=self.webpackChunkcoding_interview||[]).push([[651],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),a=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=a(e.components);return r.createElement(u.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=a(n),d=o,m=p["".concat(u,".").concat(d)]||p[d]||f[d]||i;return n?r.createElement(m,s(s({ref:t},l),{},{components:n})):r.createElement(m,s({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=p;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var a=2;a<i;a++)s[a]=n[a];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9751:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return a},toc:function(){return l},default:function(){return p}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),s=["components"],c={},u="2078. Two Furthest Houses With Different Colors",a={unversionedId:"solutions/two-furthest-houses-with-different-colors",id:"solutions/two-furthest-houses-with-different-colors",title:"2078. Two Furthest Houses With Different Colors",description:"",source:"@site/docs/solutions/2078__two-furthest-houses-with-different-colors.md",sourceDirName:"solutions",slug:"/solutions/two-furthest-houses-with-different-colors",permalink:"/coding-interview/docs/solutions/two-furthest-houses-with-different-colors",editUrl:"https://github.com/tianhaoz95-notebooks/coding-interview/edit/main/docs/solutions/2078__two-furthest-houses-with-different-colors.md",tags:[],version:"current",sidebarPosition:2078,frontMatter:{},sidebar:"solutionsSidebar",previous:{title:"2058. Find the Minimum and Maximum Number of Nodes Between Critical Points",permalink:"/coding-interview/docs/solutions/find-the-minimum-and-maximum-number-of-nodes-between-critical-points"},next:{title:"2079. Watering Plants",permalink:"/coding-interview/docs/solutions/watering-plants"}},l=[],f={toc:l};function p(e){var t=e.components,n=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"2078-two-furthest-houses-with-different-colors"},"2078. Two Furthest Houses With Different Colors"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class Solution(object):\n    def maxDistance(self, colors):\n        """\n        :type colors: List[int]\n        :rtype: int\n        """\n        max_dist = 0\n        # note down a list of (color, first_seen_location)\n        tracker = []\n        for i, c in enumerate(colors):\n            seen = False\n            for t in tracker:\n                color, first_seen_loc = t\n                if color != c:\n                    max_dist = max(max_dist, abs(i - first_seen_loc))\n                else:\n                    seen = True\n            if not seen:\n                tracker.append((c, i))\n        return max_dist\n        \n')))}p.isMDXComponent=!0}}]);